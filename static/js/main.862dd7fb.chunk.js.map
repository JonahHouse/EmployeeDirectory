{"version":3,"sources":["Components/Search/Search.js","Components/TableRow/TableRow.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","style","margin","htmlFor","id","onChange","handleSearchOption","defaultValue","value","Input","handleSearchChange","type","aria-describedby","handleSortOption","TableRow","firstName","lastName","email","role","App","state","searchQuery","searchResults","searchOption","sortOption","event","a","setState","target","handleSearch","newData","data","filter","employees","first_name","toLowerCase","match","last_name","sort","b","nameA","toUpperCase","nameB","path","this","scope","map","row","index","key","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.862dd7fb.chunk.js","sourcesContent":["import React from \"react\";\nimport { Input } from \"reactstrap\";\n\nconst Search = (props) => {\n  return (\n    <>\n      <div className=\"w-25\" style={{ margin: \"40px auto\" }}>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\n              Search By\n            </label>\n          </div>\n          <select\n            className=\"custom-select\"\n            id=\"inputGroupSelect01\"\n            onChange={props.handleSearchOption}\n          >\n            <option defaultValue value=\"first_name\">\n              First Name\n            </option>\n            <option value=\"last_name\">Last Name</option>\n            <option value=\"email\">Email</option>\n            <option value=\"role\">Role</option>\n          </select>\n        </div>\n        <div className=\"input-group mb-3\">\n          <Input\n            onChange={props.handleSearchChange}\n            type=\"text\"\n            className=\"form-control\"\n            aria-describedby=\"button-addon2\"\n          ></Input>\n        </div>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\" htmlFor=\"inputGroupSelect01\">\n              Sort By\n            </label>\n          </div>\n          <select\n            className=\"custom-select\"\n            id=\"inputGroupSelect02\"\n            onChange={props.handleSortOption}\n          >\n            <option value=\"first_name\">First Name</option>\n            <option value=\"last_name\">Last Name</option>\n          </select>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Search;\n","import React from 'react';\n\nconst TableRow = props => {\n  return (\n    <tr>\n      <td>{props.firstName}</td>\n      <td>{props.lastName}</td>\n      <td>{props.email}</td>\n      <td>{props.role}</td>\n    </tr>\n  )\n}\n\nexport default TableRow;","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Search from \"./Components/Search\";\nimport TableRow from \"./Components/TableRow\";\nimport data from \"./Components/db/employee.json\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  state = {\n    searchQuery: \"\",\n    searchResults: [],\n    searchOption: \"first_name\",\n    sortOption: \"first_name\",\n  };\n\n  handleSortOption = async (event) => {\n    await this.setState({\n      sortOption: event.target.value,\n    });\n    this.handleSearch();\n  };\n\n  handleSearchOption = async (event) => {\n    await this.setState({\n      searchOption: event.target.value,\n    });\n    this.handleSearch();\n  };\n\n  handleSearchChange = async (event) => {\n    await this.setState({\n      searchQuery: event.target.value,\n    });\n    this.handleSearch();\n  };\n\n  handleSearch = (event) => {\n    const newData = data.filter((employees) => {\n      if (this.state.searchOption == \"first_name\") {\n        return employees.first_name.toLowerCase().match(this.state.searchQuery);\n      } else if (this.state.searchOption == \"last_name\") {\n        return employees.last_name.toLowerCase().match(this.state.searchQuery);\n      } else if (this.state.searchOption == \"email\") {\n        return employees.email.toLowerCase().match(this.state.searchQuery);\n      } else if (this.state.searchOption == \"role\") {\n        return employees.role.toLowerCase().match(this.state.searchQuery);\n      }\n    });\n    if (this.state.sortOption == \"first_name\") {\n      newData.sort((a, b) => {\n        let nameA = a.first_name.toUpperCase();\n        let nameB = b.first_name.toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n      });\n    } else if (this.state.sortOption == \"last_name\") {\n      newData.sort((a, b) => {\n        let nameA = a.last_name.toUpperCase();\n        let nameB = b.last_name.toUpperCase();\n        if (nameA < nameB) {\n          return -1;\n        }\n        if (nameA > nameB) {\n          return 1;\n        }\n      });\n    }\n    this.setState({\n      searchResults: newData,\n    });\n  };\n\n  render() {\n    return (\n      <>\n        <Router>\n          <Route path=\"/\">\n            <Search\n              handleSearchChange={this.handleSearchChange}\n              handleSearchOption={this.handleSearchOption}\n              handleSortOption={this.handleSortOption}\n            />\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">First</th>\n                  <th scope=\"col\">Last</th>\n                  <th scope=\"col\">Email</th>\n                  <th scope=\"col\">Role</th>\n                </tr>\n              </thead>\n              <tbody>\n                {this.state.searchResults.map((row, index) => (\n                  <TableRow\n                    firstName={row.first_name}\n                    lastName={row.last_name}\n                    email={row.email}\n                    role={row.role}\n                    key={index}\n                  />\n                ))}\n              </tbody>\n            </table>\n          </Route>\n        </Router>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}